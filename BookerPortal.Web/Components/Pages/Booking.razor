@page "/booking"
@using Request.HTTP
@using Request.HTTP.DTO.MovieTheatreDTO
@using BookerPortal.Web.Components.ReUseUI
@rendermode InteractiveServer
@inject IBookerService BookerService
@attribute [StreamRendering]
<PageTitle>Bokningar</PageTitle>

@if (bookers != null)
{
    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Phone Number</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in bookers)
                {
                    if (item != null) 
                    {
                        <tr>
                            @if (isEditMode && selectedId == item.Id)
                            {
                                <td><input @bind="item.Name" /></td>
                                <td><input @bind="item.LastName" /></td>
                                <td><input @bind="item.Email" /></td>
                                <td><input @bind="item.PhoneNumber" /></td>
                                <EditItem bookerDTO="item" OnRemove=@OnRemove></EditItem>
                            }
                            else
                            {
                                <td class="smooth-text">@item.Name</td>
                                <td class="smooth-text">@item.LastName</td>
                                <td class="smooth-text">@item.Email</td>
                                <td class="smooth-text">@item.PhoneNumber</td>
                                <td>
                                    <button @onclick="() => SetEditMode(item)"></button>
                                    <RemoveItem bookerDTO="item" OnRemove=@OnRemove></RemoveItem>
                         
                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<BookerDTO> bookers;
    private string errorMessage;
    private bool isEditMode;
    private int selectedId = 0;


    [Inject]
    private IBookerService bookerService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadBookers();
    }


    protected async Task OnRemove()
    {
        await LoadBookers();

    }

    protected async Task SetEditMode(BookerDTO bookerDTO)
    {
        selectedId = bookerDTO.Id;
        isEditMode = true;

    }
    public async Task LoadBookers()
    {
        try
        {
            bookers = await bookerService.GetBooker();

            if (bookers != null)
            {
                for (int i = bookers.Count - 1; i >= 0; i--)
                {
                    var booker = bookers[i];
                    if (booker == null || string.IsNullOrWhiteSpace(booker.Name) || string.IsNullOrWhiteSpace(booker.LastName) || string.IsNullOrWhiteSpace(booker.Email) || string.IsNullOrWhiteSpace(booker.PhoneNumber))
                    {
                        bookers.RemoveAt(i);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while retrieving data. Please try again later.";

            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}


