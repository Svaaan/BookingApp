@page "/show"
@using Request.HTTP.RequestService.IRequestService
@using Request.HTTP.DTO.MovieTheatreDTO
@using BookerPortal.Web.Components.EditItems.MovieTheatreEdit.EditShow
@rendermode InteractiveServer
@inject IShowService showService
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin,Employee")]
<PageTitle>Visningar</PageTitle>

@if (scheduleDTO != null)
{
    @foreach (var schedule in scheduleDTO)
    {
        <table class="table table-bordered table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>ID</th>
                    <th>Salong</th>
                    <th>Film</th>
                    <th>Start</th>
                    <th>Slut</th>
                    <th>Platser kvar</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    @foreach (var item in schedule.Shows)
                    {
                        if (item != null)
                        {
                              @if (isEditMode && selectedId == item.Id)
                    {
                        <td>@item.Id</td>
                        <td><input class="form-control" @bind="item.SalonName" /></td>
                        <td><input class="form-control" @bind="item.MovieTitle"/></td>
                        <td><input class="form-control" @bind="item.StartTime" /></td>
                                <td><input class="form-control" @bind="item.EndTime" /></td>
                                <td><input class="form-control" @bind="item.AvailableSeats" /></td>
                        <td>
                            <EditItemShow showDTO="item" OnEdited=@OnEdited></EditItemShow>
                        </td>
                        
                    }
                    else
                    {
                        <td>@item.Id</td>
                        <td>@item.SalonName</td>
                        <td>@item.MovieTitle</td>
                        <td>@item.StartTime</td>
                                <td>@item.EndTime</td>
                                <td>@item.AvailableSeats</td>

                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => SetEditMode(item)">Redigera</button>
                            @if (!isEditMode || selectedId != item.Id)
                            {
                                <RemoveItemShow showDTO="item" OnRemove=@OnRemove></RemoveItemShow>
                            }
                            
                        </td>
                    }
                            
                        }

                    }
                  
                </tr>
            
        </tbody>
    </table>
    }
}


@code {
    private List<ScheduleDTO> scheduleDTO;
    private string errorMessage;
    private bool isEditMode;
    private int selectedId = 0;

    private async Task LoadShows()
    {
        try
        {
            scheduleDTO = await showService.GetShow();

        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while retrieving data. Please try again later.";

            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadShows();
    }


    protected async Task OnRemove()
    {
        await LoadShows();

    }


    protected async Task OnEdited()
    {
        selectedId = 0;
        isEditMode = false;
        await LoadShows();

    }

    protected async Task SetEditMode(ShowDTO showDTO)
    {
        selectedId = showDTO.Id;
        isEditMode = true;

    }

}


