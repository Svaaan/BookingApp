@page "/show"
@using Request.HTTP.RequestService.IRequestService
@using Request.HTTP.DTO.MovieTheatreDTO
@using BookerPortal.Web.Components.EditItems.MovieTheatreEdit.EditShow
@rendermode InteractiveServer
@inject IShowService showService
@attribute [StreamRendering]
<PageTitle>Bokningar</PageTitle>

@if (scheduleDTO != null)
{
    @foreach (var schedule in scheduleDTO)
    {
        <h2>@schedule.Date.ToShortDateString()</h2> <!-- Displaying the date as the title -->

        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>

                        <th>Movie</th>
                        <th>AvailableSeats</th>
                        <th>Salon</th>
                        <th>StartTime</th>
                        <th>EndTime</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in schedule.Shows)
                    {
                        if (item != null)
                        {
                            <tr>
                                @if (isEditMode && selectedId == item.Id)
                                {
                                    <td class="smooth-text">@item.MovieTitle</td>
                                    <td class="smooth-text">@item.AvailableSeats</td>
                                    <td class="smooth-text">@item.SalonName</td>
                                    <td><input @bind="item.StartTime" /></td>
                                    <td><input @bind="item.EndTime" /></td>
                                    <EditItemShow showDTO="item" OnEdited=@OnEdited></EditItemShow>
                                }
                                else
                                {
                                    <td class="smooth-text">@item.MovieTitle</td>
                                    <td class="smooth-text">@item.AvailableSeats</td>
                                    <td class="smooth-text">@item.SalonName</td>
                                    <td class="smooth-text">@item.StartTime.ToShortTimeString()</td>
                                    <td class="smooth-text">@item.EndTime.ToShortTimeString()</td>
                                    <td>
                                        <div style="display:flex">
                                            <button class="btn btn-warning" @onclick="() => SetEditMode(item)" style="margin-right:10px">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                                    <path d="M12.354 1.646a.5.5 0 0 1 0 .708l-9 9a.5.5 0 0 1-.708-.708l9-9a.5.5 0 0 1 .708 0zm-1.708.708L3 11.5v1.5a.5.5 0 0 0 .5.5H5l9.146-9.146-1.5-1.5z" />
                                                </svg>
                                            </button>
                                            <RemoveItemShow showDTO="item" OnRemove=@OnRemove></RemoveItemShow>
                                        </div>
                                    </td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
}


@code {
    private List<ScheduleDTO> scheduleDTO;
    private string errorMessage;
    private bool isEditMode;
    private int selectedId = 0;

    private async Task LoadShows()
    {
        try
        {
            scheduleDTO = await showService.GetShow();

        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while retrieving data. Please try again later.";

            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadShows();
    }


    protected async Task OnRemove()
    {
        await LoadShows();

    }


    protected async Task OnEdited()
    {
        selectedId = 0;
        isEditMode = false;
        await LoadShows();

    }

    protected async Task SetEditMode(ShowDTO showDTO)
    {
        selectedId = showDTO.Id;
        isEditMode = true;

    }

}


