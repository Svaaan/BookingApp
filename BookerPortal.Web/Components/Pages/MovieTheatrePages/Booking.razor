@page "/booking"
@using BookerPortal.Web.Components.EditItems.MovieTheatreEdit.EditBooker
@using Request.HTTP.RequestService.IRequestService
@using Request.HTTP.DTO.MovieTheatreDTO
@rendermode InteractiveServer
@inject IBookerService bookerService
@inject IShowService showService
@inject IReservationService reservationService
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin,User")]
<PageTitle>Bokningar</PageTitle>

<style>

    .modal {
        display: none; 
        position: fixed; 
        z-index: 1; 
        left: 0;
        top: 0;
        width: 100%; 
        height: 100%; 
        overflow: auto; 
        background-color: rgba(0, 0, 0, 0.4); 
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; 
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
</style>

@if (bookers != null)
{
    <div class="table-container">
        @if (isModalOpen)
        {
            <div class="modal" style="display: block;">
                <div class="modal-content">
                    <span class="close" @onclick="CloseModal">&times;</span>
                    <p>Boka</p>
                    <label for="dropdown">Välj en visning:</label>
                    <select id="dropdown" @bind="selectedShowId">
                        @foreach (var s in schedule)
                        {
                            <p>@s.Date.ToShortDateString()</p>
                            @foreach (var show in s.Shows)
                            {
                                <option value="@show.Id">@show.MovieTitle - @show.StartTime - Platser kvar: @show.AvailableSeats</option>
                            }
                        }
                    </select>
                    <label for="seatCount">Antal platser:</label>
                    <input type="number" id="seatCount" @bind="selectedSeatCount" min="1" max="10"> <!-- Adjust min and max values as needed -->
                    <Button Color="ButtonColor.Primary"  @onclick="MakeReservation">Boka</Button>
                </div>
            </div>
        }

        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Phone Number</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in bookers)
                {
                    if (item != null) 
                    {
                        <tr>
                            @if (isEditMode && selectedId == item.Id)
                            {
                                <td><input @bind="item.Name" /></td>
                                <td><input @bind="item.LastName" /></td>
                                <td><input @bind="item.Email" /></td>
                                <td><input @bind="item.PhoneNumber" /></td>
                                <EditItemBooker bookerDTO="item" OnEdited=@OnEdited></EditItemBooker>
                            }
                            else
                            {
                                <td class="smooth-text">@item.Name</td>
                                <td class="smooth-text">@item.LastName</td>
                                <td class="smooth-text">@item.Email</td>
                                <td class="smooth-text">@item.PhoneNumber</td>
                            }
                            <td>
                                <div style="display:flex; justify-content: flex-end;">
                                    @if (!isEditMode || selectedId != item.Id)
                                    {
                                        <button class="btn btn-warning" @onclick="() => SetEditMode(item)" style="margin-right:10px">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                                <path d="M12.354 1.646a.5.5 0 0 1 0 .708l-9 9a.5.5 0 0 1-.708-.708l9-9a.5.5 0 0 1 .708 0zm-1.708.708L3 11.5v1.5a.5.5 0 0 0 .5.5H5l9.146-9.146-1.5-1.5z" />
                                            </svg>
                                        </button>
                                        <RemoveItemBooker bookerDTO="item" OnRemove=@OnRemove></RemoveItemBooker>
                                    }
                                    <button class="btn btn-success" @onclick="() => OpenModal(item.Id)" style="margin-right:10px">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                                            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                                        </svg>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}


@code {
    private List<BookerDTO> bookers;
    private List<ScheduleDTO> schedule = new();
    private string errorMessage;
    private bool isEditMode;
    private int selectedId = 0;
    private bool isModalOpen = false;
    private int itemIdForModal = 0;
    private int selectedShowId;
    private int selectedBookerId;
    private int selectedSeatCount;

    private async Task LoadBookers()
    {
        try
        {
            bookers = await bookerService.GetBooker();

        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while retrieving data. Please try again later.";

            Console.WriteLine($"Error: {ex.Message}");
        }
    }


    private async Task LoadShows()
    {
        try
        {
            schedule = await showService.GetShow();

        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while retrieving data. Please try again later.";

            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task MakeReservation()
    {
        try
        {
            ReservationDTO reservationDTO = new()
                {
                    BookerId = selectedBookerId,
                    ShowId = selectedShowId,
                    BookedSeats = selectedSeatCount // Use the selected number of seats
                };
            await reservationService.PostReservation(reservationDTO);
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while retrieving data. Please try again later.";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadBookers();
        await LoadShows();
    }


    protected async Task OnRemove()
    {
        await LoadBookers();

    }


    protected async Task OnEdited()
    {
        selectedId = 0;
        isEditMode = false;
        await LoadBookers();

    }

    protected async Task SetEditMode(BookerDTO bookerDTO)
    {
        selectedId = bookerDTO.Id;
        isEditMode = true;

    }

    protected void OpenModal(int id)
    {
        itemIdForModal = id;
        isModalOpen = true;
        selectedBookerId = id;
    }

    protected void CloseModal()
    {
        isModalOpen = false;
    }

    protected async Task SaveChanges()
    {
        isModalOpen = false;
    }
}
