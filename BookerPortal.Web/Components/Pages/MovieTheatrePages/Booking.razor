@page "/booking"
@using BookerPortal.Web.Components.EditItems.MovieTheatreEdit.EditBooker
@using Request.HTTP.RequestService.IRequestService
@using Request.HTTP.DTO.MovieTheatreDTO
@rendermode InteractiveServer
@inject IBookerService bookerService
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin,Employee")]
<PageTitle>Bokningar</PageTitle>

@if (bookers != null)
{
    <AddItemsBooker BookerId="@selectedBookerId" IsOpen="@isModalOpen" OnClose="@CloseModal"></AddItemsBooker>

    <table class="table table-bordered table-hover">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Namn</th>
                <th>Efternamn</th>
                <th>Email</th>
                <th>Telefon</th>
                <th>Boknings nummer</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in bookers)
            {
                <tr>
                    @if (isEditMode && selectedId == item.Id)
                    {
                        <td>@item.Id</td>
                        <td><input class="form-control" @bind="item.Name" /></td>
                        <td><input class="form-control" @bind="item.LastName" /></td>
                        <td><input class="form-control" @bind="item.Email" /></td>
                        <td><input class="form-control" @bind="item.PhoneNumber" /></td>
                        <td>@item.BookingNumber</td>
                        <td>
                            <EditItemBooker bookerDTO="item" OnEdited=@OnEdited></EditItemBooker>
                        </td>
                    }
                    else
                    {
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.LastName</td>
                        <td>@item.Email</td>
                        <td>@item.PhoneNumber</td>
                        <td>@item.BookingNumber</td>
                        <td>
                            <button class="btn btn-success btn-sm" @onclick="() => OpenAddModal(item.Id)">Boka</button>
                            <button class="btn btn-warning btn-sm" @onclick="() => SetEditMode(item)">Redigera</button>
                            @if (!isEditMode || selectedId != item.Id)
                            {
                                <RemoveItemBooker bookerDTO="item" OnRemove=@OnRemove></RemoveItemBooker>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BookerDTO> bookers;
    private string errorMessage;
    private bool isEditMode;
    private int selectedId = 0;
    private int selectedBookerId;
    private bool isModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadBookers();
    }

    private async Task LoadBookers()
    {
        try
        {
            bookers = await bookerService.GetBooker();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while retrieving data. Please try again later.";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    protected async Task OnRemove()
    {
        await LoadBookers();
    }

    protected async Task OnEdited()
    {
        selectedId = 0;
        isEditMode = false;
        await LoadBookers();
    }

    protected void SetEditMode(BookerDTO bookerDTO)
    {
        selectedId = bookerDTO.Id;
        isEditMode = true;
    }

    protected void OpenAddModal(int bookerId)
    {
        selectedBookerId = bookerId;
        isModalOpen = true;
    }

    protected async Task CloseModal()
    {
        isModalOpen = false;
        await LoadBookers();
    }
}
