@page "/add-item-employee"
@using Request.HTTP.DTO.MovieTheatreDTO
@using Request.HTTP.RequestService.IRequestService
@using BookerPortal.Web.ViewModels
@using System.Text.RegularExpressions
@inject IEmployeeService employeeService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Antiforgery;
@attribute [RequireAntiforgeryToken(required: false)]

<style>
    body {
        margin-top: 10px;
        background-color: #f8f9fa;
    }

    .container {
        margin-top: 25px;
    }

    .register-frame {
        border: 2px solid black;
        padding: 20px;
        border-radius: 10px;
    }

        .register-frame input[type="text"],
        .register-frame input[type="password"],
        .register-frame input[type="email"] {
            border: 1px solid black;
            border-radius: 5px;
            color: black;
        }

            .register-frame input[type="text"]::placeholder,
            .register-frame input[type="password"]::placeholder,
            .register-frame input[type="email"]::placeholder {
                color: black;
                opacity: 0.7;
            }

        .register-frame .btn {
            background-color: black;
            color: white;
            border: 1px solid black;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

            .register-frame .btn:hover {
                background-color: #333;
                border-color: #333;
            }

        .register-frame a {
            color: black;
        }

            .register-frame a:hover {
                color: #333;
            }

    .form-controll {
        color: #343a40;
        font-weight: bold;
    }
</style>

<div class="container" style="display: @(successMessage != "" ? "none" : "block");">
    <div class="row">
        <div class="col-lg-4 offset-lg-4 pt-4 pb-4 register-frame">
            <div class="text-center mb-3">
                <img src="login.png" style="max-height:10rem;" />
            </div>
            <EditForm Model="@Model" FormName="RegisterForm" OnSubmit="SubmitForm">
                <div class="mb-3">
                    <label>Namn</label>
                    <InputText @bind-Value="Model.Name" class="form-control" placeholder="Name" />
                    <ValidationMessage For="() => Model.Name" />
                </div>
                <div class="mb-3">
                    <label>Efternamn</label>
                    <InputText @bind-Value="Model.LastName" class="form-control" placeholder="Surname" />
                    <ValidationMessage For="() => Model.LastName" />
                </div>
                <div class="mb-3">
                    <label>Email</label>
                    <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                    <ValidationMessage For="() => Model.Email" />
                </div>
                <div class="mb-3">
                    <label>Lösenord</label>
                    <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" type="password" />
                    <ValidationMessage For="() => Model.Password" />
                </div>
                <div class="mb-3">
                    <label>Roll</label>
                    <InputText @bind-Value="Model.Role" class="form-control" placeholder="Role: Admin, Manager, Employee" />
                    <ValidationMessage For="() => Model.Role" />
                </div>
                <div class="mb-3 text-center">
                    <span class="text-danger">@errorMessage</span>
                </div>
                <div class="mb-3 d-grid gap-2">
                    <button type="submit" class="btn btn-primary">Lägg till</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

            <div style="text-align: center; display: flex; align-items: center; flex-direction: column;">
                @if (!string.IsNullOrWhiteSpace(successMessage))
                {

                    <div class="success-message">
                        <span style="display: flex; align-items: center;">
                            @successMessage
                            <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-check" viewBox="0 0 16 16">
                                <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425z" />
                            </svg>
                        </span>
                    </div>
                    
                }
                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    
                    <div class="error-message">
                        @errorMessage
                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                        </svg>
                    </div>
                }
            </div>



@code {
    [SupplyParameterFromForm]
    public EmployeeDTO Model { get; set; } = new();

    private string successMessage = "";
    private string errorMessage = "";

    public enum EmployeeRole
    {
        Admin,
        Manager,
        Employee
    }

    protected override void OnInitialized()
    {
        Model ??= new EmployeeDTO();
    }

    private async Task SubmitForm()
    {
        try
        {
            string rolePattern = "^(Admin|Manager|Employee)$";
            if (!Regex.IsMatch(Model.Role, rolePattern, RegexOptions.IgnoreCase))
            {
                errorMessage = "Invalid role. Please enter Admin, Manager, or Employee.";
                return;
            }

            if (!Enum.TryParse(Model.Role, true, out EmployeeRole parsedRole))
            {
                errorMessage = "Failed to parse the role.";
                return;
            }

            EmployeeDTO employeeDTO = new EmployeeDTO
                {
                    Name = Model.Name,
                    LastName = Model.LastName,
                    Email = Model.Email,
                    Password = Model.Password,
                    CompanyId = 1,
                    Role = Model.Role,
                };

            var response = await employeeService.PostEmployee(employeeDTO);

            if (employeeDTO != null)
            {

                successMessage = "Bokning tillagd";
                errorMessage = "";

            }
            else
            {
                successMessage = "";
                errorMessage = "Något gick fel. Försök igen.";
            }

        }
        catch (Exception ex)
        {
            
            Console.WriteLine(ex.ToString());
        }
    }
}
