@page "/addemployee"
@using Request.HTTP.DTO.MovieTheatreDTO
@using Request.HTTP.RequestService.IRequestService
@using BookerPortal.Web.ViewModels
@using System.Text.RegularExpressions
@inject IEmployeeService employeeService
@inject NavigationManager navigationManager

<style>
    .register-frame {
        border: 2px solid black;
        padding: 20px;
        border-radius: 10px;
    }

        .register-frame input[type="text"],
        .register-frame input[type="text"] {
            border: 1px solid black;
            border-radius: 5px;
            color: black;
        }

            .register-frame input[type="text"]::placeholder,
            .register-frame input[type="text"]::placeholder {
                color: black;
                opacity: 0.7;
            }

        .register-frame .btn {
            background-color: black;
            color: white;
            border: 1px solid black;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

            .register-frame .btn:hover {
                background-color: #333;
                border-color: #333;
            }

        .register-frame a {
            color: black;
        }

            .register-frame a:hover {
                color: #333;
            }

    .form-controll {
        color: #343a40;
        font-weight: bold;
    }
</style>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 register-frame">
        <div class="text-center mb-3">
            <img src="login.png" style="max-height:10rem;" />
        </div>
        <EditForm Model="@Model" FormName="RegisterForm" OnSubmit="SubmitForm">
            <div class="mb-3">
                <label>Name</label>
                <InputText @bind-Value="Model.Name" class="form-control" placeholder="Name" />
                <ValidationMessage For="() => Model.Name" />
            </div>
            <div class="mb-3">
                <label>Surname</label>
                <InputText @bind-Value="Model.LastName" class="form-control" placeholder="Surname" />
                <ValidationMessage For="() => Model.LastName" />
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => Model.Email" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3">
                <label>Company</label>
                <InputNumber @bind-Value="Model.CompanyId" class="form-control" placeholder="CompanyId" />
                <ValidationMessage For="() => Model.CompanyId" />
            </div>
            <div class="mb-3">
                <label>Role</label>
                <InputText @bind-Value="Model.Role" class="form-control" placeholder="Role: Admin, Manager, Employee" />
                <ValidationMessage For="() => Model.Role" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Register</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public EmployeeViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task SubmitForm()
    {
        EmployeeDTO employeeDTO = new EmployeeDTO
            {
                Name = Model.Name,
                LastName = Model.LastName,
                Email = Model.Email,
                Password = Model.Password,
                CompanyId = Model.CompanyId,
//                Role = Model.Role
            };

        string rolePattern = "^(admin|manager|employee)$";
        if (!Regex.IsMatch(Model.Role, rolePattern, RegexOptions.IgnoreCase))
        {
            errorMessage = "Invalid role. Please enter Admin, Manager, or Employee.";
            return;
        }

        var response = await employeeService.PostEmployee(employeeDTO);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Failed to register the employee.";
        }
    }
}