@page "/add-item-booker"
@using Request.HTTP.RequestService.IRequestService
@using Request.HTTP.DTO.MovieTheatreDTO
@rendermode InteractiveServer
@inject IShowService showService
@inject IReservationService reservationService
@inject NavigationManager Navigation

<style>
    .confirmation-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        width: 40%;
        max-height: 80%;
        overflow-y: auto;
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        z-index: 1001;
        text-align: center;
    }

    .modal-body {
        margin-bottom: 10px;
    }

    .modal-footer {
        display: flex;
        justify-content: center;
    }

        .modal-footer button {
            margin: 0 5px;
        }
</style>

@if (isModalOpen)
{
    <div class="confirmation-modal">
        <div class="modal-overlay" @onclick="CloseModal"></div>
        <div class="modal-content">
            <div class="modal-body">
                <p>Boka</p>
                <label for="dropdown">Välj en visning:</label>
                <select id="dropdown" @bind="selectedShowId">
                    @foreach (var s in schedule)
                    {
                        @foreach (var show in s.Shows)
                        {
                            <option value="@show.Id">@s.Date.ToShortDateString() - @show.MovieTitle - @show.StartTime - Platser kvar: @show.AvailableSeats</option>
                        }
                    }
                </select>
                <label for="seatCount">Antal platser:</label>
                <input type="number" id="seatCount" @bind="selectedSeatCount" min="1" max="10" />
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="NavigateToAddBooker">Lägg till</button>
                <button class="btn btn-primary" @onclick="MakeReservation">Boka</button>
                <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int BookerId { get; set; }
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }

    private List<ScheduleDTO> schedule = new();
    private string errorMessage;
    private bool isModalOpen = false;
    private int selectedShowId;
    private int selectedSeatCount;

    protected override async Task OnParametersSetAsync()
    {
        isModalOpen = IsOpen;
        if (isModalOpen)
        {
            await LoadShows();
        }
    }

    private async Task LoadShows()
    {
        try
        {
            schedule = await showService.GetShow();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while retrieving data. Please try again later.";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task MakeReservation()
    {
        try
        {
            var reservationDTO = new ReservationDTO
                {
                    BookerId = BookerId,
                    ShowId = selectedShowId,
                    BookedSeats = selectedSeatCount
                };
            await reservationService.PostReservation(reservationDTO);
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while making a reservation. Please try again later.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            await CloseModal();
        }
    }

    private void NavigateToAddBooker()
    {
        Navigation.NavigateTo("/add-booker");
    }

    protected async Task CloseModal()
    {
        isModalOpen = false;
        await OnClose.InvokeAsync(false);
    }
}
